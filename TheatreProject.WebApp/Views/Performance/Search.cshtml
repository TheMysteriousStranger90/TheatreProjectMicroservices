@using TheatreProject.WebApp.Models.Enums
@using System.Globalization
@model PagedResponse<TheatreProject.WebApp.Models.DTOs.PerformanceDto>
@{
    ViewData["Title"] = "Search Performances";
    var sortBy = Context.Request.Query["SortBy"].ToString();
    var isDescendingStr = Context.Request.Query["IsDescending"].ToString();
    var isDescending = !string.IsNullOrEmpty(isDescendingStr) && bool.TryParse(isDescendingStr, out var parsed) ? parsed : false;
    var pageSize = Context.Request.Query["PageSize"].ToString();
    var selectedCategory = Context.Request.Query["Category"].ToString();
    var usdCulture = new CultureInfo("en-US");
}

<div class="container-fluid py-3">
    @if (User.IsInRole("Administrator"))
    {
    <div class="mb-3">
        <a asp-action="CreatePerformance" class="btn btn-danger shadow-sm">
            <i class="fas fa-plus-circle"></i> Create New Performance
        </a>
    </div>
    }
</div>

<div class="card shadow-lg border-0 rounded-3 mb-4">
    <div class="card-header bg-dark text-white py-3">
        <h4 class="mb-0">
            <i class="fas fa-search"></i> Search Performances
            <small class="float-end">
                <i class="fas fa-filter"></i> Found: @Model?.TotalRecords performances
            </small>
        </h4>
    </div>
    <div class="card-body">
        <form method="get" id="searchForm" class="mb-4">
            <!-- Enhanced Search Section -->
            <div class="row g-3 mb-4">
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="text" name="SearchTerm" class="form-control" id="searchTerm"
                               value="@Context.Request.Query["SearchTerm"]" placeholder="Search...">
                        <label for="searchTerm">Search performances</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <select name="Category" class="form-select" id="category">
                            <option value="">All Categories</option>
                            @foreach (TheatreCategory category in Enum.GetValues(typeof(TheatreCategory)))
                            {
                                var value = ((int)category).ToString();
                                <option value="@value" selected="@(value == selectedCategory)">
                                    @category
                                </option>
                            }
                        </select>
                        <label for="category">Category</label>
                    </div>
                </div>

                <!-- Date Range with Datepicker -->
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="date" name="StartDate" class="form-control datepicker"
                               id="startDate" value="@Context.Request.Query["StartDate"]">
                        <label for="startDate">Start Date</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="date" name="EndDate" class="form-control datepicker"
                               id="endDate" value="@Context.Request.Query["EndDate"]">
                        <label for="endDate">End Date</label>
                    </div>
                </div>
                <div class="col-md-1">
                    <button type="submit" class="btn btn-dark h-100 w-100" id="searchButton">
                        <i class="fas fa-search"></i>
                        <span class="d-none d-lg-inline ms-1">Search</span>
                    </button>
                </div>
            </div>

            <!-- Advanced Filters Section -->
            <div class="row g-3 align-items-end">
                <div class="col-md-3">
                    <div class="form-floating">
                        <select name="SortBy" class="form-select">
                            <option value="date" selected="@(sortBy != "price")">Date</option>
                            <option value="price" selected="@(sortBy == "price")">Price</option>
                        </select>
                        <label>Sort By</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <select name="IsDescending" class="form-select">
                            <option value="false" selected="@(!isDescending)">Ascending</option>
                            <option value="true" selected="@(isDescending)">Descending</option>
                        </select>
                        <label>Order</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <select name="PageSize" class="form-select">
                            @foreach (var size in new[] { "6", "12", "24" })
                            {
                                <option value="@size" selected="@(size == pageSize)">@size</option>
                            }
                        </select>
                        <label>Items per page</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="number"
                               name="MinPrice"
                               class="form-control"
                               step="0.01"
                               min="0"
                               value="@Context.Request.Query["MinPrice"]"
                               placeholder="Min Price">
                        <label>Min Price</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="number"
                               name="MaxPrice"
                               class="form-control"
                               step="0.01"
                               min="0"
                               value="@Context.Request.Query["MaxPrice"]"
                               placeholder="Max Price">
                        <label>Max Price</label>
                    </div>
                </div>
                <div class="col-md-1">
                    <a href="@Url.Action("Search")" class="btn btn-secondary w-100" title="Clear all filters">
                        <i class="fas fa-undo">
                            <span class="d-none d-lg-inline ms-1">Clean</span>
                        </i>
                    </a>
                </div>
            </div>
        </form>

        <!-- Results Section -->
        <div id="searchResults">
        @if (Model?.Data == null || !Model.Data.Any())
        {
            <div class="alert alert-info fade show">
                <i class="fas fa-info-circle me-2"></i>
                No performances found matching your criteria.
            </div>
        }
        else
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mb-4">
                @foreach (var item in Model.Data)
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm hover-shadow transition-all">
                            <div class="position-relative">
                                <img src="@item.ImageUrl" class="card-img-top" alt="@item.Name"
                                     style="height: 200px; object-fit: cover;">
                                <div class="position-absolute top-0 end-0 p-2">
                                    <span class="badge bg-primary rounded-pill">
                                        <i class="fas fa-tag me-1"></i>@item.Category
                                    </span>
                                </div>
                            </div>
                            <div class="card-body">
                                <h5 class="card-title text-truncate">@item.Name</h5>
                                <p class="card-text text-muted">
                                    <i class="fas fa-theater-masks me-1"></i>@item.TheatreName
                                    <br/>
                                    <i class="fas fa-map-marker-alt me-1"></i>@item.City
                                </p>
                                <p class="card-text">
                                    @item.Description.Substring(0, Math.Min(100, item.Description.Length))...
                                </p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-danger fw-bold fs-5">
                                        @item.BasePrice.ToString("C", usdCulture)
                                    </span>
                                    <small class="text-muted">
                                        <i class="far fa-calendar-alt me-1"></i>
                                        @item.ShowDateTime.ToString("MMM dd, yyyy")
                                    </small>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="btn-group">
                                        <a asp-action="DetailsPerformance" asp-route-id="@item.Id"
                                           class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-info-circle"></i> Details
                                        </a>
                                        @if (User.IsInRole("Administrator"))
                                        {
                                            <a asp-action="EditPerformance" asp-route-id="@item.Id"
                                               class="btn btn-sm btn-outline-warning">
                                                <i class="fas fa-edit"></i> Edit
                                            </a>
                                            <form asp-action="Delete" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Enhanced Pagination -->
            <nav aria-label="Page navigation" class="mt-4">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <p class="mb-0 text-muted">
                            Showing @(((Model.PageNumber - 1) * Model.PageSize) + 1) to
                            @(Math.Min(Model.PageNumber * Model.PageSize, Model.TotalRecords))
                            of @Model.TotalRecords results
                        </p>
                    </div>
                    <div class="col-md-6">
                        <ul class="pagination pagination-sm justify-content-end mb-0">
                        @if (Model.HasPrevious)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Search", new { pageNumber = 1 })"
                                   aria-label="First">
                                    <i class="fas fa-angle-double-left"></i>
                                </a>
                            </li>
                            <li class="page-item">
                                <a class="page-link"
                                   href="@Url.Action("Search", new { pageNumber = Model.PageNumber - 1 })"
                                   aria-label="Previous">
                                    <i class="fas fa-angle-left"></i>
                                </a>
                            </li>
                        }

                        @foreach (var pageNumber in Model.GetPaginationRange())
                        {
                            <li class="page-item @(pageNumber == Model.PageNumber ? "active" : "")">
                                <a class="page-link"
                                   href="@Url.Action("Search", new { pageNumber = pageNumber, SearchTerm = Context.Request.Query["SearchTerm"].ToString(), Category = selectedCategory, StartDate = Context.Request.Query["StartDate"].ToString(), EndDate = Context.Request.Query["EndDate"].ToString(), SortBy = sortBy, IsDescending = isDescending, PageSize = pageSize })"
                                   data-bs-toggle="tooltip"
                                   title="Go to page @pageNumber">
                                    @pageNumber
                                </a>
                            </li>
                        }
                        </ul>
                    </div>
                </div>
            </nav>
        }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/aos@next/dist/aos.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize AOS
            AOS.init({
                duration: 800,
                once: true
            });

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            // Price validation and form handling
            $('#searchForm').on('submit', function(e) {
                const minPrice = parseFloat($('input[name="MinPrice"]').val());
                const maxPrice = parseFloat($('input[name="MaxPrice"]').val());

                if (minPrice && maxPrice && minPrice > maxPrice) {
                    e.preventDefault();
                    alert('Minimum price cannot be greater than maximum price');
                    return false;
                }
                showLoader();
            });

            // Auto-submit on select change
            $('#searchForm select').change(function() {
                showLoader();
                $('#searchForm').submit();
            });

            // Loading indicator
            function showLoader() {
                if (!$('.loading-overlay').length) {
                    $('body').append(`
                        <div class="loading-overlay">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    `);
                }
            }

            // Update pagination links
            function updatePaginationLinks() {
                $('.page-link').each(function() {
                    let href = $(this).attr('href');
                    const params = new URLSearchParams(window.location.search);
                    const preserveParams = ['MinPrice', 'MaxPrice', 'SearchTerm', 'Category', 'SortBy', 'PageSize'];
                    
                    preserveParams.forEach(param => {
                        if (params.has(param)) {
                            href += `&${param}=${params.get(param)}`;
                        }
                    });
                    
                    $(this).attr('href', href);
                });
            }

            updatePaginationLinks();
        });
    </script>

    <style>
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .card {
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
        }

        .pagination .page-link {
            transition: all 0.3s;
        }

        .pagination .page-link:hover {
            background-color: #000;
            color: white;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.25rem rgba(220,53,69,.25);
        }

        .btn-hover {
            transition: all 0.3s;
        }

        .btn-hover:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
    </style>
}